/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.vipul.retailstore.server;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vipul.retailstore.server.model.Product;
import com.vipul.retailstore.server.service.StoreService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-05-13T10:52:16.203+05:30")

@Api(value = "product", description = "the product API")
public interface ProductApi {

	Logger log = LoggerFactory.getLogger(ProductApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Get all products", nickname = "getAllProducts", notes = "Get all products", response = Product.class, tags = {
			"product", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Product.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Product not found") })
	@RequestMapping(value = "/product/{productId}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<Product> getAllProducts(
			@ApiParam(value = "ID of product to return", required = true) @PathVariable("productId") Long productId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getService().isPresent()) {
				return new ResponseEntity<>(getService().get().getProduct(productId), HttpStatus.OK);
			}
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	default Optional<StoreService> getService() {
		return Optional.empty();
	}

}
